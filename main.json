{"ver":"1.2", "main":"ZGVmIGluZm9fbGljZW5jZShsaWNlbmNlSUQpOgogICAgdHJ5OgogICAgICAgIHVybCA9IGYiaHR0cHM6Ly9hcGkuaHlwZXIuY28vdjYvbGljZW5zZXMve2xpY2VuY2VJRH0iCiAgICAgICAgaGVhZGVycyA9IHsKICAgICAgICAgICAgImFjY2VwdCI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAgICAgIkF1dGhvcml6YXRpb24iOiAiQmVhcmVyIHBrXzFFUnFiZlRuUm9wblZmVFVXRXZxbVcxWUtKOERickl6RTZBUVk5MVZzRWxsMW9UdFFrZElWMkRxMDJlT3AyMmMifQogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHVybCwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCkKICAgIGV4Y2VwdDoKICAgICAgICBwYXNzCiAgICAgICAgcmV0dXJuCgoKaWYgKGluZm9fbGljZW5jZShsaWNlbmNlKSk6CiAgICBwcmludChmIntjb2xvci5ncmlzfVt7Y29sb3IuY3lhbn1JTkZPUk1BVElPTntjb2xvci5ncmlzfV0gQ29ubmVjdGlvbiBlbiBjb3Vycy4uLiIpCiAgICBpbmZvID0gaW5mb19saWNlbmNlKGxpY2VuY2UpCiAgICBpZiAoaW5mb1sncGxhbiddWydhY3RpdmUnXSk6CiAgICAgICAgQVBJX1JldHVybl9QTEFOX1N0YXR1dCA9IEZhbHNlCiAgICAgICAgaWYoaW5mb1snc3RhdHVzJ10gPT0gInRyaWFsaW5nIik6CiAgICAgICAgICAgIGlmIChpbmZvWydzdWJzY3JpcHRpb24nXVsnY2FuY2VsX2F0X3BlcmlvZF9lbmQnXSA9PSBUcnVlKToKICAgICAgICAgICAgICAgIEFQSV9SZXR1cm5fUExBTl9TdGF0dXQgPSAiTGljZW5jZSBFc3NhaWUgRXhwaXLDqSIKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIEFQSV9SZXR1cm5fUExBTl9TdGF0dXQgPSBUcnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYoaW5mb1snc3RhdHVzJ10gPT0gInBhc3RfZHVlIik6CiAgICAgICAgICAgICAgICBBUElfUmV0dXJuX1BMQU5fU3RhdHV0ID0gIkxpY2VuY2UgZW4gYXR0ZW50ZSBkZSBwYWllbWVudCIKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIChpbmZvWydzdGF0dXMnXSA9PSAiYWN0aXZlIik6CiAgICAgICAgICAgICAgICAgICAgQVBJX1JldHVybl9QTEFOX1N0YXR1dCA9IFRydWUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgaWYgKGluZm9bJ3N0YXR1cyddID09ICJjYW5jZWxlZCIpOgogICAgICAgICAgICAgICAgICAgICAgICBBUElfUmV0dXJuX1BMQU5fU3RhdHV0ID0gIkxpY2VuY2UgRXhwaXLDqSIKICAgICAgICBpZiAoQVBJX1JldHVybl9QTEFOX1N0YXR1dCA9PSBUcnVlKToKICAgICAgICAgICAgQVBJX1JldHVybl9JTlRFR1JBVElPTl9EaXNjb3JkSUQgPSBpbmZvWydpbnRlZ3JhdGlvbnMnXVsnZGlzY29yZCddWydpZCddCiAgICAgICAgICAgIEFQSV9SZXR1cm5fSU5URUdSQVRJT05fRGlzY29yZFVzZXJuYW1lID0gaW5mb1snaW50ZWdyYXRpb25zJ11bJ2Rpc2NvcmQnXVsndXNlcm5hbWUnXQogICAgICAgICAgICBBUElfUmV0dXJuX0lOVEVHUkFUSU9OX0Rpc2NvcmREaXNjcmltaW5hdG9yID0gaW5mb1snaW50ZWdyYXRpb25zJ11bJ2Rpc2NvcmQnXVsnZGlzY3JpbWluYXRvciddCiAgICAgICAgICAgIEFQSV9SZXR1cm5fSU5URUdSQVRJT05fRGlzY29yZEF2YXRhciA9IGluZm9bJ2ludGVncmF0aW9ucyddWydkaXNjb3JkJ11bJ2F2YXRhciddCiAgICAgICAgICAgIEFQSV9SZXR1cm5fUExBTl9TdGF0dXQgPSBpbmZvWydwbGFuJ11bJ2FjdGl2ZSddCiAgICAgICAgICAgIEFQSV9SZXR1cm5fUExBTl9uYW1lID0gaW5mb1sncGxhbiddWyduYW1lJ10KICAgICAgICAgICAgQVBJX1JldHVybl9QTEFOX0Rlc2NyaXB0aW9uID0gaW5mb1sncGxhbiddWydkZXNjcmlwdGlvbiddCiAgICAgICAgICAgIEFQSV9SZXR1cm5fUExBTl9JbWFnZSA9IGluZm9bJ3BsYW4nXVsnaW1hZ2UnXQogICAgICAgICAgICBBUElfUmV0dXJuX1BMQU5fQW1vdW50SW50ZXJ2YWwgPSBpbmZvWydwbGFuJ11bJ2Ftb3VudCddCiAgICAgICAgICAgIEFQSV9SZXR1cm5fUExBTl9SZWN1cnJpbmdJbnRlcnZhbCA9IGluZm9bJ3BsYW4nXVsncmVjdXJyaW5nJ11bJ2ludGVydmFsJ10KICAgICAgICAgICAgQVBJX1JldHVybl9QTEFOX1JlY3VycmluZ0NvdW50ID0gaW5mb1sncGxhbiddWydyZWN1cnJpbmcnXVsnaW50ZXJ2YWxfY291bnQnXQogICAgICAgICAgICBBUElfUmV0dXJuX1BMQU5fVHlwZSA9IGluZm9bJ3BsYW4nXVsndHlwZSddCiAgICAgICAgICAgIEFQSV9SZXR1cm5fUExBTl9EZXZpc2UgPSBpbmZvWydwbGFuJ11bJ2N1cnJlbmN5J10KICAgICAgICAgICAgaWYoQVBJX1JldHVybl9QTEFOX0RldmlzZT09ImV1ciIpOgogICAgICAgICAgICAgICAgVkFSX1RFWFRfRGV2aXNlID0gIuKCrCIKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIFZBUl9URVhUX0RldmlzZSA9ICIkIgogICAgICAgICAgICBWQVJfVEVYVF9BbW91bnRJbnRlcnZhbCA9IChBUElfUmV0dXJuX1BMQU5fQW1vdW50SW50ZXJ2YWwvMTAwKQogICAgICAgICAgICBpZihBUElfUmV0dXJuX1BMQU5fVHlwZSA9PSAicmVjdXJyaW5nIik6CiAgICAgICAgICAgICAgICBpZihBUElfUmV0dXJuX1BMQU5fUmVjdXJyaW5nQ291bnQgPT0gMSk6CiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGYie1ZBUl9URVhUX0Ftb3VudEludGVydmFsfXtWQVJfVEVYVF9EZXZpc2V9L3tBUElfUmV0dXJuX1BMQU5fUmVjdXJyaW5nSW50ZXJ2YWx9IgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ2NscycpCiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oZiJ0aXRsZSB7QVBJX1JldHVybl9JTlRFR1JBVElPTl9EaXNjb3JkVXNlcm5hbWV9I3tBUElfUmV0dXJuX0lOVEVHUkFUSU9OX0Rpc2NvcmREaXNjcmltaW5hdG9yfSAtIHtBUElfUmV0dXJuX1BMQU5fbmFtZX0ge21lc3NhZ2V9IC0gTElDRU5DRXZ7QVBJX1JldHVybl9MSUNFTkNFWyd2ZXInXX0iKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICAgICAgcHJpbnQoZiJ7Y29sb3IuZ3Jpc31be2NvbG9yLmphdW5lfUxJQ0VOQ0V7Y29sb3IuZ3Jpc31dIFNUQVRVVCAtIHtjb2xvci52ZXJ0fUFjdGlme2NvbG9yLmdyaXN9IikKICAgICAgICAgICAgcHJpbnQoZiJ7Y29sb3IuZ3Jpc31be2NvbG9yLmN5YW59SU5GT1JNQVRJT057Y29sb3IuZ3Jpc31dIENvbm5lY3TDqS4iKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYie2NvbG9yLmdyaXN9W3tjb2xvci5qYXVuZX1MSUNFTkNFe2NvbG9yLmdyaXN9XSBTVEFUVVQgLSB7Y29sb3Iucm91Z2V9e0FQSV9SZXR1cm5fUExBTl9TdGF0dXR9e2NvbG9yLmdyaXN9IikKICAgICAgICAgICAgb3MuX2V4aXQoMCkKICAgIGVsc2U6CiAgICAgICAgaWYobGljZW5jZSk6CiAgICAgICAgICAgIHByaW50KGYie2NvbG9yLmdyaXN9W3tjb2xvci5qYXVuZX1MSUNFTkNFe2NvbG9yLmdyaXN9XSBTVEFUVVQgLSB7Y29sb3Iucm91Z2V9SW5jb25udWV7Y29sb3IuZ3Jpc30iKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYie2NvbG9yLmdyaXN9W3tjb2xvci5jeWFufUlORk9STUFUSU9Oe2NvbG9yLmdyaXN9XSBWb3VzIGRldmV6IHtjb2xvci5yb3VnZX1vYmxpZ2F0b2lyZW1lbnR7Y29sb3IuZ3Jpc30gw6ljcmlyZSB1bmUgbGljZW5jZSBkYW5zIGxlIGZpY2hpZXIgYGxpY2VuY2UuanNvbmAgISIpCiAgICAgICAgb3MuX2V4aXQoMCkKZWxzZToKICAgIGlmKGxpY2VuY2UpOgogICAgICAgIHByaW50KGYie2NvbG9yLmdyaXN9W3tjb2xvci5qYXVuZX1MSUNFTkNFe2NvbG9yLmdyaXN9XSB7Y29sb3Iucm91Z2V9SW5jb25udWV7Y29sb3IuZ3Jpc30iKQogICAgZWxzZToKICAgICAgICBwcmludChmIntjb2xvci5ncmlzfVt7Y29sb3IuY3lhbn1JTkZPUk1BVElPTntjb2xvci5ncmlzfV0gVm91cyBkZXZleiB7Y29sb3Iucm91Z2V9b2JsaWdhdG9pcmVtZW50e2NvbG9yLmdyaXN9IMOpY3JpcmUgdW5lIGxpY2VuY2UgZGFucyBsZSBmaWNoaWVyIGBsaWNlbmNlLmpzb25gICEiKQogICAgb3MuX2V4aXQoMCk="}
